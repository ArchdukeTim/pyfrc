#!/usr/bin/env python3

from os.path import dirname, exists, join
import sys, subprocess
from setuptools import find_packages, setup

setup_dir = dirname(__file__)
base_package = 'pyfrc'
version_file = join(setup_dir, 'lib', base_package, 'version.py')

# Automatically generate a version.py based on the git version
if exists(join(setup_dir, '.git')):
    p = subprocess.Popen(["git", "describe", "--tags", "--dirty=-dirty"],
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    out, err = p.communicate()
    # Make sure the git version has at least one tag
    if err:
        print("Error: You need to create a tag for this repo to use the builder")
        sys.exit(1)

    # Create the version.py file
    with open(version_file, 'w') as fp:
        fp.write("# Autogenerated by setup.py\n__version__ = '{0}'".format(out.decode('utf-8').rstrip()))

if exists(version_file):
    with open(version_file, 'r') as fp:
        exec(fp.read(), globals())
else:
    __version__ = "master"

with open(join(setup_dir, 'requirements.txt')) as requirements_file:
    install_requires = requirements_file.readlines()

with open(join(dirname(__file__), 'README.md'), 'r') as readme_file:
    long_description = readme_file.read()

setup(name='pyfrc',
      version=__version__,
      description='Development tools library for python interpreter used for the FIRST Robotics Competition',
      long_description=long_description,
      author='Dustin Spicuzza, Sam Rosenblum',
      author_email='robotpy@googlegroups.com',
      url='https://github.com/robotpy/pyfrc',
      license='BSD',
      packages=find_packages(),
      package_dir={'': 'lib'},
      install_requires=install_requires,
      classifiers=[
        'Development Status :: 4 - Beta',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: BSD License',
        'Programming Language :: Python :: 3.4',
        'Topic :: Software Development'
        ],
      entry_points={'robotpy': [
        'coverage = pyfrc.mains.cli_coverage:PyFrcCoverage',
        'profiler = pyfrc.mains.cli_profiler:PyFrcProfiler',
        'sim = pyfrc.mains.cli_sim:PyFrcSim',
        'test = pyfrc.mains.cli_test:PyFrcTest',
        'upload = pyfrc.mains.cli_upload:PyFrcUpload',
      ]}
)



